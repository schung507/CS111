This is a skeleton for CS 111 Lab 1.

Partner: Lynn Hao Tran

Limitations:
-Profiling is EXTREMELY slow for pipes
-We added a lock but it hindered performace greatly so we commented the code out
-with the lock everything still works, but commands are really slow

Answers to Part 1c:

For timing our processes, we used CLOCK_MONOTONIC to measure real time. This clock
is more reliable than CLOCK_REALTIME because it times based on some unspecified point
in the past regardless of what the time is in real world and therefore is not susceptible
to time jumps (as is the case with CLOCK_REALTIME since it must measure by real world
time since 1970). It is always increasing at the same rate with no way to jump, so it
is the most reliable for timing processes.

1. No, absolute time will not always be guaranteed to be nondecreasing based on the
nature of CLOCK_REALTIME. If CLOCK_REALTIME is reset anytime during the process (because
it is set to the specified date in 1970), it can jump forward or back based on that
reset. If it jumps back, then the times printing out after the jump back can be less than
what was already printing out.

2. In our lab, no, it is not possible for the second column (real time) be less
than the sum of the third and fourth columns (user and system time) because we are
not running anything in parallel. If we were running in parallel, however, the clock
real time would be less because it only accounts for the clock time it takes for the
process to finish. The CPU time, on the other hand, takes the cumulative times of all
the parallel processes and adds them up to be what the real time would be had the 
process not run in parallel.

3. The second, third, or fourth column can possibly be negative in the case of overflow.
CLOCK_MONOTONIC and CLOCK_REALTIME measure with signed integers, so if the process runs
long enough then overflow can occur and the overly positive time will overflow into 
negative time (very large power of 2 so it likely wouldn't occur unless it is a VERY 
long process, probably not something that would be run in this class).

4. Interleaving is not possible because none of our processes run in parallel. In the
case of processes running in parallel, however, locking the file as its being written to 
for one process and unlocking it once that processes finishes should prevent the writing
from different processes from interfering with each other.
